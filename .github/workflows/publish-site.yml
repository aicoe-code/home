name: Publish Site

on:
  push:
    branches: [ main ]
    paths:
      - 'Private/00-Public_site/**'
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for publishing'
        required: false
        default: 'site: publish from Private/00-Public_site'
        type: string
      dry_run:
        description: 'Dry run (no commit/push)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

concurrency:
  group: publish-site
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Compute flags
        id: flags
        run: |
          set -euo pipefail
          # Determine dry_run from workflow_dispatch input if present, else false
          DRY_RUN=false
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            if command -v jq >/dev/null 2>&1; then
              DRY_RUN=$(jq -r '.inputs.dry_run // false' "$GITHUB_EVENT_PATH")
            else
              # Fallback if jq is not available
              DRY_RUN=false
            fi
          fi
          echo "dry_run=$DRY_RUN" >> "$GITHUB_OUTPUT"

      - name: Verify source directory
        run: |
          set -euo pipefail
          if [ ! -d "Private/00-Public_site" ]; then
            echo "Source directory 'Private/00-Public_site' not found in repo." >&2
            echo "Either create it or update the workflow to point elsewhere." >&2
            exit 1
          fi

      - name: Sync Private -> docs
        id: sync
        run: |
          set -euo pipefail
          SRC="Private/00-Public_site"
          DST="docs"
          mkdir -p "$DST"

          rsync -av --delete \
            --exclude ".DS_Store" \
            --exclude ".git*" \
            --exclude "x_*" \
            --exclude "_drafts/**" \
            --exclude "README.md" \
            --exclude "Private/**" \
            "$SRC"/ "$DST"/

      - name: Fingerprint assets (css/js)
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          # Find css/js that are not already fingerprinted like name.<hash>.ext
          mapfile -t FILES < <(find docs -type f \( -name '*.css' -o -name '*.js' \) \
            -not -regex '.*\.[0-9a-fA-F]\{8\}\.(css|js)$')
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No assets to fingerprint."
          else
            for f in "${FILES[@]}"; do
              dir=$(dirname "$f"); file=$(basename "$f")
              base=${file%.*}; ext=${file##*.}
              hash=$(sha256sum "$f" | cut -c1-8)
              new="$dir/$base.$hash.$ext"
              if [ -f "$new" ]; then
                # Same content as an existing hashed file; remove the plain one
                rm -f "$f"
              else
                mv "$f" "$new"
              fi
              # Update references in all HTML files under docs
              find docs -type f -name '*.html' -print0 | xargs -0 -I{} sed -i.bak "s#\b${file}\b#${base}.${hash}.${ext}#g" {}
            done
            # Clean up sed backup files
            find docs -type f -name '*.bak' -delete || true
          fi

      - name: Compute changes
        id: changes
        run: |
          CHANGED=$(git status --porcelain=v1 docs | wc -l | tr -d ' ')
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"
          echo "Changed files in docs/: $CHANGED"

      - name: Show changes
        run: |
          git status --porcelain=v1 docs || true

      - name: Commit changes
        if: steps.changes.outputs.changed != '0' && steps.flags.outputs.dry_run != 'true'
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add docs
          if command -v jq >/dev/null 2>&1; then
            CM=$(jq -r '.inputs.commit_message // empty' "$GITHUB_EVENT_PATH")
          else
            CM=""
          fi
          if [ -z "$CM" ] || [ "$CM" = "null" ]; then
            CM='site: publish from Private/00-Public_site'
          fi
          git commit -m "$CM"

      - name: Push changes
        if: steps.changes.outputs.changed != '0' && steps.flags.outputs.dry_run != 'true'
        run: |
          git push origin HEAD:main

      - name: Summary
        run: |
          {
            echo "## Publish Summary";
            echo "- Dry run: ${{ steps.flags.outputs.dry_run }}";
            echo "- Changed files: ${{ steps.changes.outputs.changed }}";
            if [ "${{ steps.flags.outputs.dry_run }}" = "true" ]; then
              echo "- No commit or push performed.";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
